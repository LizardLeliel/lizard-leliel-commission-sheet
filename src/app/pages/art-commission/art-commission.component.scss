
@import "/node_modules/bootstrap/scss/functions";
@import "/node_modules/bootstrap/scss/variables";
@import "/node_modules/bootstrap/scss/mixins";

.content-card {
	&:hover {
		box-shadow: 0 1.5rem 5rem rgba($black, .175) !important; /* Fight BS's shadow-lg !important */
	}	
}

.commission-style {
	&:hover {
		box-shadow: 0 1.5rem 5rem rgba($black, .175) !important; /* Fight BS's shadow-lg !important */
	}

	overflow: hidden;
	border-radius: 8px;
	height: content;

	.card {
		border: 0px;
	}

	.commission-style-banner {
		height: 320px;		

		border-radius: 0px;

		img {
			object-fit: cover;
			/* object-position: center; */
			height: inherit;
			border-bottom-left-radius: 0px;
			border-bottom-right-radius: 0px;
		}
	}

	.card-text.smush-left {
		width: 66%;
	}


	@include media-breakpoint-down(sm) {
		.commission-style-banner {
			height:  500px;
		}

		.card-text.smush-left {
			width: 100%;
		}

		img.bump-left-on-small {
			object-position: top 0px right -260px;
		}
	}

}

.wide-card-container {
	border-radius: 8px;
	object-fit: cover;
	height: content;

	.card {
		margin-bottom: 0px;
	}

	.card-img-overlay {
		padding: 2rem;
		border-radius: 0;
	}

	img {
		object-fit: cover;
		border-radius: 0px;

		height: unset;
	}

	.right-side-thing-rename-later {
		background-color:  #333;
		padding: 2rem;
		height:  100%;
	}
}


.wide-title {
	padding: 2rem;
	padding-top: 1.5rem;
	padding-bottom: 1.5rem;

	/* background-image: linear-gradient(180deg, rgba(0, 0, 0, .7), rgba(0, 0, 0, .8));*/
	background-color: #333;
	color: white;
}


.card-img.left-side {
	/* the 4rem accounts for padding. I'll use scss variables later */
	width: 50%
}

.card-img.right-side {
	width: 50%;
	position: absolute;
	right: 0px;
}

.card-text.bottom {
	position: absolute;
	bottom: 2rem;
}

.card-text.bottom-left {
	position: absolute;
	bottom: 2rem;
	width: calc(50% - 4rem);
}

.card-text.bottom-right {
	position: absolute;
	bottom: 2rem;
	left: calc(50% + 2rem);
	width: calc(50% - 4rem);
}

.spanning-header {
	.left-hedder {
		width: 50%;
	}

	.right-header {
		position: absolute;
		left: calc(50% + 2rem);
		width: 50%;
	}
}

.commission-me {
	&:hover {
		box-shadow: 0 1.8rem 6rem rgba($black, .175) !important; /* Fight BS's shadow-lg !important */
	}

	h1 {
		font-size:  3.8rem;
		padding-top:  2.4rem;
		padding-bottom: 2.4rem;
		padding-left:  0;
		padding-right: 0;
	}
}


/* Card groups have a fixed breakpoint at sm. However, we want it to break at medium.
 The way the card group is defined means we have to unset everything at the sm breakpoint
 and redeclare it at medium */
 /* I'm very likely to just write my own set of cards */
.card-group {
  // The child selector allows nested `.card` within `.card-group`
  // to display properly.
  > .card {
    margin-bottom: var(--#{$prefix}card-group-margin);
  }

  /* This works way too suspiciously well */
  @include media-breakpoint-up(sm) {
    display: unset;
    flex-flow: unset;
    // The child selector allows nested `.card` within `.card-group`
    // to display properly.
    > .card {
      // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
      flex: unset;
      margin-bottom: unset;

      + .card {
        margin-left: unset;
        border-left: unset;
      }

      // Handle rounded corners
      @if $enable-rounded {
        &:not(:last-child) {
          @include border-end-radius(unset);

          .card-img-top,
          .card-header {
            // stylelint-disable-next-line property-disallowed-list
            border-top-right-radius: unset;
          }
          .card-img-bottom,
          .card-footer {
            // stylelint-disable-next-line property-disallowed-list
            border-bottom-right-radius: unset;
          }
        }

        &:not(:first-child) {
          @include border-start-radius(unset);

          .card-img-top,
          .card-header {
            // stylelint-disable-next-line property-disallowed-list
            border-top-left-radius: unset;
          }
          .card-img-bottom,
          .card-footer {
            // stylelint-disable-next-line property-disallowed-list
            border-bottom-left-radius: unset;
          }
        }
      }
    }
  }

  @include media-breakpoint-up(lg) {
    display: flex;
    flex-flow: row wrap;
    // The child selector allows nested `.card` within `.card-group`
    // to display properly.
    > .card {
      // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
      flex: 1 0 0%;
      margin-bottom: 0;

      + .card {
        margin-left: 0;
        border-left: 0;
      }

      // Handle rounded corners
      @if $enable-rounded {
        &:not(:last-child) {
          @include border-end-radius(0);

          .card-img-top,
          .card-header {
            // stylelint-disable-next-line property-disallowed-list
            border-top-right-radius: 0;
          }
          .card-img-bottom,
          .card-footer {
            // stylelint-disable-next-line property-disallowed-list
            border-bottom-right-radius: 0;
          }
        }

        &:not(:first-child) {
          @include border-start-radius(0);

          .card-img-top,
          .card-header {
            // stylelint-disable-next-line property-disallowed-list
            border-top-left-radius: 0;
          }
          .card-img-bottom,
          .card-footer {
            // stylelint-disable-next-line property-disallowed-list
            border-bottom-left-radius: 0;
          }
        }
      }
    }
  }
  


}